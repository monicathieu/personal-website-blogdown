---
title: Setting up this website
date: 2020-03-20
tags: ["R", "Hugo", "html", "pandoc", "hacks", "blogdown"]
output:
  blogdown::html_page:
    number_sections: true
---

It's approximately two weeks into CoVID-19 starting to shut down the world as I know it, and social distancing brain has me going through waves of fluctuating productivity. A couple days ago, I decided the most useful thing I could handle doing with my day inside was scratching a (hopefully) fun technical to-do off of my list would be moving my personal website over to `blogdown`.

My previous personal website was through [Squarespace](https://www.squarespace.com/). Squarespace is incredibly powerful if you want more sophisticated site features (floating navbars, clicking and dragging to set up complex text box layouts, etc), but I always felt that it was a bit overkill feature-wise (and subscription-wise) for an aesthetically pleasing, yet ultimately information-light website. Further, I hadn't integrated my Squarespace site with any blogging tools, so I wasn't able to have much regularly updated content beyond adding things onto the CV section of my About Me page.

I'd been thinking of moving to a self-maintained static site for a while, especially one that would easily let me post R Markdown blog posts to the internet. I'm happy to trade in a less impressive theme for blog post compatibility with R Markdown. In case others might want to read my R Markdown ramblings, I want to put them online!

After a couple days of not insignificant headache, here we are! I will describe tidbits I learned (and am still learning) in the process of setting this site up that might help you if you find yourself plumbing the `blogdown` waters in the future.

# Setting up a blogdown repository

Yihui Xie et al.'s guide to `blogdown` is **indispensable** for setting up a site. 

# Blogdown-ing with a different Hugo theme

`blogdown` tends to play best with Hugo themes that are structured very similarly to Yihui's pre-formatted [`hugo-lithium`](https://github.com/yihui/hugo-lithium) theme. I ended up pulling [Radek Koziel's Terminal theme](https://themes.gohugo.io/hugo-theme-terminal/) from the Hugo theme gallery. Aside from the minimalist look, I liked that it came with support for code highlighting, as I knew I'd be posting blogs with R code chunks. Getting the code highlighting to work ended up taking [a bit more finagling](#fixing-code-syntax-highlighting) than I anticipated at first, though.

## Making a new homepage template

Radek's Terminal theme by default sets the homepage to be a list of blog posts. I knew that for this site, I wanted a simple splash landing page. Additionally, I still wanted to use the blog posts list layout, but as a page accessible through the menu bar.

### Understanding Hugo's expected structure

With little experience in HTML and related front-end codig, it took me a while to wrap my head around the division between webpage _layouts_ and _content._

At first blush it sounds reasonable--you want to be able to specify _what's_ on your webpage separately from _where_ things go on your webpage, to centralize design decisions. Hard-coding the layout of, say, a blog post page would be troublesome if you had add page features by editing the layout of every single page individually. But what about a home page, where the layout would only be used once over the whole website? It would be so straightforward to hard-code layout information directly in my homepage file. Not so fast, though!

To change the layout of the homepage, I had to understand enough Hugo to construct my own homepage layout file separately from my homepage content file, and then save the layout file in the right place for Hugo to know it was the layout guide for my homepage.

The homepage layout file should live in: `themes/your-theme/layouts/_index.html`. Depending on your theme, either this file will already exist and you can edit it, or a dedicated homepage layout will not already exist and you will need to create a file at this path.

The homepage content file should live in `content/_index.Rmd`. If the layout file works correctly, all you'll need to type here is whatever welcome text you'd like on your home page. 

You can find a bunch more details in [section 2.5.1](https://bookdown.org/yihui/blogdown/templates.html#a-minimal-example) of the blogdown manual and the [homepage template section](https://gohugo.io/templates/homepage/) of the Hugo manual.

## Adding pages to the menu bar



# Hooking it into the interwebs

## Syncing `public` files to GitHub Pages

## Re-pointing my old Squarespace domain name

To hook a GitHub Pages site to a custom domain name, you have to set up two steps:

1. Tell your domain name system (DNS) provider to point your domain name to your GitHub Pages URL
1. Tell your GitHub Pages site to use a custom domain

### Pointing Squarespace DNS to GitHub Pages URL

The Squarespace website management feature that I opted to keep was **domain name management.** Squarespace allows you to buy an available domain name directly through their own site editor, so I'd previously bought monicathieu.com for my old website. I followed the instructions on Squarespace's help pages to [point my existing domain to a non-Squarespace site](https://support.squarespace.com/hc/en-us/articles/215744668-Pointing-a-Squarespace-Domain), so that when you go to monicathieu.com, it shows you whatever's hosted at monicathieu.github.io instead. Then for step 2, below:

### Get GitHub Pages URL to use new domain

In order to complete the connection, I followed [GitHub's instructions](https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site) to set www.monicathieu.com as the "custom domain" option in the GitHub Pages GUI settings for my repository, and then initialized the CNAME helper file in the public files of my repo.

# Adding a photo gallery into the theme

The photo gallery I added doesn't 100% work,

# Fixing code syntax highlighting

## Prism.js, and the mysterious case of pre vs code classes

The `hugo-theme-lithium` default theme that `blogdown` sets up with comes with [highlight.js](https://highlightjs.org/) for code syntax highlighting. Many Hugo websites don't involve people posting code they've written, so Hugo themes don't _all_ come with syntax highlighting Javascript plugins. When they do, though, they don't all use the same plugin to color the code. Terminal, the theme I selected, uses [Prism.js](https://prismjs.com/) for syntax highlighting.

What these plugins do, somewhere under the hood, is look for HTML content with a specific tag. All content tagged to identify it as code gets passed through the coloring plugin, which formats the text with the right colors for function names, arguments, and such.

When blogdown knits R Markdown files to raw Markdown, and then knits those files to HTML, it detects the location of code chunks and adds the tags `<pre class=r>` and `<code>` so that the syntax highlighting plugin knows which sections are R code, and should be pre-formatted and highlighted. To embed chunks of another language, the preformatting tag can take a different class, e.g. `<pre class=python>`. Ideally, your code gets seamlessly colored in HTML, with the colors adapting to whatever language you'd written in. However, clearly that's not what happened for me, because you're reading this now.

What I discovered, after knitting my website several times and seeing that code chunks did _not_ have highlighted text, was that **blogdown was formatting the HTML tags using an outdated syntax Prism.js did not understand.** blogdown was labeling knitted code chunks with the tags `<pre class=r><code>`. But Prism.js was expecting the tag to be a little different: `<pre><code class=language-r>`. The `language` class had moved from the `<pre>` tag to the `<code>` tag, and now had the `language-` prefix. (I believe that highlight.js has now updated as well to expect the language tag as `<pre><code class=language-r>`, but it might still be backwards compatible with blogdown's output, thus not requiring the hacking I did. Prism.js is most definitely not backwards compatible.)

Okay, so this seemed fixable with a bit of pattern matching magic. All I had to do was string-replace all of the code chunk tags in my blog post HTMLs with the Prism.js-compatible syntax. Seems easy enough right? Well...


## Lua filters for pandoc

I learned that pandoc uses [filters](https://pandoc.org/lua-filters.html) to apply small formatting changes. These changes are made on a special pandoc intermediate file (so an Rmd file actually goes Rmd -> md -> pandoc -> HTML). At their core, these filters allow you to apply complex string matching to edit the pandoc intermediate file, in a way such that the search-and-replace always searches in a consistent language (pandoc intermediate syntax) but can modify formatting tags that will go into a variety of languages (HTML, LaTeX, etc). You could use this to, say, replace all HTML tags matching a certain pattern with slightly modified HTML tags...

Pandoc's filters are written in a scripting language called Lua, which I had never heard of until I started diving into this pandoc debugging issue.

https://github.com/ukgovdatascience/govdown/commit/c294943bdae3428ec6f82a0210cefb0ad7c55778

https://github.com/a-vrma/pandoc-filters/

To debug, I ran these pandoc commands directly from the terminal by copying and pasting the pandoc command that would appear when I would run something like:

```shell
pandoc intermediate-file.md --output output-file.html --lua-filter=PATH/TO/HIGHLIGHT/FILTER.lua --no-highlight
```

## Updating RStudio's pandoc installation

[this bookdown GitHub issue from 2018](https://github.com/rstudio/bookdown/issues/617) revealed the solution. Pandoc was too old! But then why was it working when I tried to run the pandoc commands directly from the terminal, and failing when pandoc was run inside of RStudio?

I discovered that I had a second, newer copy of pandoc installed with Anaconda. (Yes y'all, I installed Anaconda WAY after I started using R.) When I was calling pandoc through the terminal, it was calling the Anaconda version, which was new enough to work with Lua. However, RStudio was calling the older copy of pandoc inside of the RStudio app folder, which did not have Lua filters installed.
